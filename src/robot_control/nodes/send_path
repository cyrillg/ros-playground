#!/usr/bin/env python

import sys
import rospy
import yaml
from std_msgs.msg import Header
from nav_msgs.msg import Path
from geometry_msgs.msg import PoseStamped, Pose, Point

class PathSender:
    def __init__(self):
        # Initialize the node
        rospy.init_node("path_sender")
        rospy.sleep(1.)

        args = sys.argv
        print args
        if len(args)>0:
            self.path_id = args[1]

        # Variables
        self.initialized = True #False

        # Retrieve the configs and initialize the controller
        self.DB_file = None
        try:
            self.DB_path = rospy.get_param("/db_path")
            self.initialized = True
        except KeyError as e:
            rospy.logerr("Missing config: {}".format(e))

        # Publisher/subscriber
        self.pub = rospy.Publisher("/deedee/path", Path, queue_size=10)
        rospy.sleep(1.)

    def retrieve_path(self, path_id):
        path = None
        try:
            with open(self.DB_path, 'r') as db:
                db = yaml.load(db)
                print db
            if path_id in db.keys():
                path = db[path_id]
            else:
                rospy.logerr("No such path in DB: %s" % path_id)
        except yaml.YAMLError as exc:
            print(exc)

        return path

    def convert_path(self, path):
        conv_path = Path()
        i = 0
        for p in path:
            pose = PoseStamped(pose=Pose(position=Point(x=p[0], y=p[1])),
                               header=Header(stamp=rospy.Time.now(),
                                             seq=i))
            conv_path.poses.append(pose)
            i += 1
        return conv_path

    def send_path(self, path):
        self.pub.publish(path)

    def main(self):
        if self.initialized:
            path = self.retrieve_path(self.path_id)
            if path:
                path = self.convert_path(path)
                print("Path:")
                print(path)
                self.send_path(path)
                rospy.sleep(1.)
        else:
          rospy.logerr("Node shutting down because not initialized properly")

if __name__=="__main__":
    p = PathSender()
    p.main()
