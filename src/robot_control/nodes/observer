#!/usr/bin/env python

import rospy
from robot_control.observer_lib import *
from rospy import Subscriber, Publisher

from geometry_msgs.msg import PoseStamped
from gazebo_msgs.msg import ModelStates
from tf.transformations import euler_from_quaternion as rpy_from_q

class IdealObsNode:
    ''' Ideal observer node

        Detail:
          - Declare a specific type of observer.
          - Subscribe to all necessary sensor topics.
          - Run the main estimation loop using the methods of the observer class,
            then publish the estimate.
    '''
    def __init__(self):
        # Initialize the node
        rospy.init_node("observer")
        rospy.sleep(0.5)

        # Variables
        self.sensor_readings = {}
        self.initialized = False
        self.model_state_seq = 0

        # Retrieve the configs and initialize the observer
        try:
            self.get_config()
            self.observer = IdealObs(self.robot_name,
                                     self.observer_config)
            self.initialized = True
        except KeyError as e:
            rospy.logerr("Missing config: {}".format(e))

        # Publisher/subscriber
        Subscriber("/gazebo/model_states",
                   ModelStates,
                   self.on_model_states)

        self.state_pub = Publisher("state",
                                   PoseStamped,
                                   queue_size=10)

    def on_model_states(self, model_state):
        ''' Callback for sensor [Gazebo model state]
        '''
        idx = model_state.name.index("deedee")

        state = PoseStamped()
        state.pose = model_state.pose[idx]
        state.header.seq = self.model_state_seq
        state.header.stamp = rospy.Time().now()
        state.header.frame_id = "map"

        self.sensor_readings["true_state"] = (state,
                                              state.header.stamp.to_sec())

    def get_config(self):
        ns = rospy.get_namespace()
        self.robot_name = ns.strip("/")
        self.observer_config = rospy.get_param(ns+"observer")

    def main(self):
        ''' Main loop
        '''
        rate = rospy.Rate(10)
        t_start = rospy.Time.now().to_sec()

        while not rospy.is_shutdown():
            if self.observer.check_readings(self.sensor_readings,
                                            rospy.Time.now().to_sec()):
                state = self.observer.estimate(self.sensor_readings)
                self.state_pub.publish(state)

            rate.sleep()


if __name__=="__main__":
    o = IdealObsNode()
    o.main()

